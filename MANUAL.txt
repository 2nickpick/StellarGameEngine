Copyright (C) 2013 Julian Marchant <onpon4@lavabit.com>

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.

========================================================================

This file documents the Stellar Game Engine API.  It is extended from
the documentation strings included within the source code.  Note that
this manual does not cover extra features or other anomalies in specific
implementations; for that information, please see the implementation's
included README file.


Contents
------------------------------------------------------------------------

I. Introduction
II. SGE Concepts
  II.A. Events
  II.B. The Mouse
  II.C. Colors
    II.C.1. HTML Color Names
    II.C.2. RGB(A) Tuples
    II.C.3. HTML Hex Strings
    II.C.4. Hexadecimal Integers
III. Global Variables and Constants
IV. Classes
  IV.A. sge.Game
    IV.A.1. Constructor Method (sge.Game.__init__)
    IV.A.2. sge.Game.start
    IV.A.3. sge.Game.end
    IV.A.4. sge.Game.pause
    IV.A.5. sge.Game.unpause
    IV.A.6. sge.Game.event_game_start
    IV.A.7. sge.Game.event_step
    IV.A.8. sge.Game.event_key_press
    IV.A.9. sge.Game.event_key_release
    IV.A.10. sge.Game.event_mouse_move
    IV.A.11. sge.Game.event_mouse_button_press
    IV.A.12. sge.Game.event_mouse_button_release
    IV.A.13. sge.Game.event_joystick_axis_move
    IV.A.14. sge.Game.event_joystick_hat_move
    IV.A.15. sge.Game.event_joystick_button_press
    IV.A.16. sge.Game.event_joystick_button_release
    IV.A.17. sge.Game.event_close
    IV.A.18. sge.Game.event_mouse_collision
    IV.A.19. sge.Game.event_mouse_collision_left
    IV.A.20. sge.Game.event_mouse_collision_right
    IV.A.21. sge.Game.event_mouse_collision_top
    IV.A.22. sge.Game.event_mouse_collision_bottom
    IV.A.23. sge.Game.event_game_end
    IV.A.24. sge.Game.event_paused_key_press
    IV.A.25. sge.Game.event_paused_key_release
    IV.A.26. sge.Game.event_paused_mouse_move
    IV.A.27. sge.Game.event_paused_mouse_button_press
    IV.A.28. sge.Game.event_paused_mouse_button_release
    IV.A.29. sge.Game.event_paused_joystick_axis_move
    IV.A.30. sge.Game.event_paused_joystick_hat_move
    IV.A.31. sge.Game.event_paused_joystick_button_press
    IV.A.32. sge.Game.event_paused_joystick_button_release
    IV.A.33. sge.Game.event_paused_close
  IV.B. sge.Sprite
    IV.B.1. Cunstructor Method (sge.Sprite.__init__)
    IV.B.2. sge.Sprite.draw_dot
    IV.B.3. sge.Sprite.draw_line
    IV.B.4. sge.Sprite.draw_rectangle
    IV.B.5. sge.Sprite.draw_ellipse
    IV.B.6. sge.Sprite.draw_circle
    IV.B.7. sge.Sprite.draw_sprite
    IV.B.8. sge.Sprite.draw_text
    IV.B.9. sge.Sprite.draw_clear


I. Introduction
------------------------------------------------------------------------

Stellar Game Engine (or "SGE") is a game engine designed for use by
Stellar.  Its design is loosely based on the proprietary program, Game
Maker.  The purpose of SGE is to make game development easier, which
allows more rapid development by experienced game developers and also
helps less experienced game developers learn how to develop games.


II. SGE Concepts
------------------------------------------------------------------------

  II.A. Events
  ----------------------------------------------------------------------

  Much like Game Maker, SGE uses an event-based system, with events
  defined by special class methods with names that start with "event_".

  Except in certain special cases, events are handled in an arbitrary
  order; if Event A and Event B happen at the same time, one
  implementation might handle Event A first, while another
  implementation might handle Event B first.  Still another
  implementation might in theory even handle Event A first one frame,
  then handle Event B in another.
  
  
  II.B. The Mouse
  ----------------------------------------------------------------------
  
  The mouse is handled somewhat unusually in SGE.  Rather than having
  functions or variables report the mouse position relative to the
  screen, the mouse position within the room, calculated based on its
  position on the screen by SGE, is recorded in a special
  sge.StellarClass object which represents the mouse.  This mouse object
  can be found as sge.game.mouse, and it has the special object ID,
  "mouse".
  
  The mouse object differs from most sge.StellarClass objects in a few
  ways.  Its speed variables cannot be manually set, and they always
  report numbers which correspond to the average motion of the mouse
  during the last quarter of a second.  Setting sge.game.mouse.visible
  toggles whether or not the mouse cursor itself is visible, and setting
  sge.game.mouse.sprite sets the mouse cursor to the sprite assigned.
  
  In all other ways, the mouse object is exactly the same as all other
  sge.StellarClass objects.
  
  
  II.C. Colors
  ----------------------------------------------------------------------
  
  Colors can be defined in SGE in a few ways.
  
    II.C.1. HTML Color Names
    --------------------------------------------------------------------
    
    The sixteen basic HTML colors, written as strings, are accepted by
    SGE.  These are case-insensitive, so "red" is the same as "Red" or
    "rEd".  The colors are:
    
    * "white"
    * "silver"
    * "gray"
    * "black"
    * "red"
    * "maroon"
    * "yellow"
    * "olive"
    * "lime"
    * "green"
    * "aqua"
    * "teal"
    * "blue"
    * "navy"
    * "fuchsia"
    * "purple"
    
    
    II.C.2. RGB(A) Tuples
    --------------------------------------------------------------------
    
    A tuple containing three or four values is accepted as a color by
    SGE.  Each index represents a component of a color: first red, then
    green, then blue, with the values being integers from 0 to 255.  For
    example, (255, 128, 0) indicates a color with full red intensity,
    50% green intensity, and no blue intensity, which is a shade of
    orange.  Note that the colors combine as colors of light, not colors
    of pigment.
    
    The fourth value of the tuple, if specified, indicates the alpha
    transparency of the color, with the values again being integers from
    0 to 255.  255 is fully opaque, 0 is fully transparent, and any
    value in between indicates the amount of transparency; for example,
    128 is 50% transparent.  If the fourth value is unspecified, it is
    assumed that the color is fully opaque.
    
    RGBA tuples are the only way to specify alpha transparency of colors
    in SGE.  All other methods for indicating color assume full opacity.
    
    
    II.C.3. HTML Hex Strings
    --------------------------------------------------------------------
    
    An HTML hex string is accepted as a color by SGE.  HTML hex strings
    are in the format "#RRGGBB", where "RR", "GG", and "BB" are replaced
    with the red, green, and blue components of the color, respectively,
    in hexadecimal form.  FF (equivalent to 255 in decimal form) is full
    intensity of the respective color, and 00 (equivalent to 0 in
    decimal form) is no intensity of the respective color.  For example,
    "#FF8000" is the same as (255, 128, 0), or orange.
    
    
    II.C.4. Hexadecimal Integers
    --------------------------------------------------------------------
    
    A hexadecimal integer is accepted as a color by SGE.  This should be
    in the same form as HTML hex strings, but integral.  For example,
    0xFF8000 is the same as (255, 128, 0), or orange.


III. Global Variables and Constants
------------------------------------------------------------------------

Constants:
* IMPLEMENTATION: A string identifying the how the engine is implemented
    (e.g. the name of the graphics library used).
* ALIGN_LEFT: Flag indicating alignment to the left.
* ALIGN_CENTER: Flag indicating alignment to the horizontal center.
* ALIGN_RIGHT: Flag indicating alignment to the right.
* ALIGN_TOP: Flag indicating alignment to the top.
* ALIGN_MIDDLE: Flag indicating alignment to the vertical middle.
* ALIGN_BOTTOM: Flag indicating alignment to the bottom.
* MOUSE_BUTTON_LEFT: The mouse button number which corresponds with the
    left mouse button.
* MOUSE_BUTTON_RIGHT: The mouse button number which corresponds with the
    right mouse button.
* MOUSE_BUTTON_MIDDLE: The mouse button number which corresponds with
    the middle mouse button.
* MOUSE_BUTTON_WHEEL_UP: The mouse button number which corresponds with
    rolling the mouse wheel up.
* MOUSE_BUTTON_WHEEL_DOWN: The mouse button number which corresponds
    with rolling the mouse wheel down.
* MOUSE_BUTTON_WHEEL_LEFT: The mouse button number which corresponds
    with tilting the mouse wheel to the left.
* MOUSE_BUTTON_WHEEL_RIGHT: The mouse button number which corresponds
    with tilting the mouse wheel to the right.

Global variables:
* game: Stores the current game.  If there is no game currently, this
    variable is set to None.
* image_directories: A list of directories where images can be found.
    Default is ./data/images, ./data/sprites, or ./data/backgrounds.
* font_directories: A list of directories where font files can be found.
    Default is ./data/fonts.
* sound_directories: A list of directories where sounds can be found.
    Default is ./data/sounds.
* music_directories: A list of directories where music files can be
    found.  Default is ./data/music.


IV. Classes
------------------------------------------------------------------------

Classes are the heart of SGE's operation.  Most functionality in games
is best implemented via subclassing SGE's classes.


  IV.A. sge.Game
  ----------------------------------------------------------------------
  
  This class handles most parts of the game which operate on a global
  scale, such as global game events.  Before anything else is done with
  SGE, an object either of this class or of a class derived from this
  class must be created.
  
  When an object of this class is created, it is automatically assigned
  to sge.game.
  
  Note: Do not create multiple sge.Game objects.  Doing so may cause
  errors.
  
  Attributes:
  * width: The width of the game's display in pixels.
  * height: The height of the game's display in pixels.
  * fullscreen: True if the game should be in fullscreen, False
      otherwise.
  * scale: A number indicating a fixed scale factor (e.g. 1 for no
      scaling, 2 for doubled size).  If set to 0, scaling is automatic
      (causes the game to fit the window or screen).
  * scale_proportional: If set to True, scaling is always
      proportional.  If set to False, the image may be stretched to
      completely fill the game window or screen.  This has no effect
      unless ``scale`` is 0.
  * scale_smooth: If set to True, a smooth scaling algorithm will be
      used, if available.  Otherwise, simple scaling (e.g. pixel
      doubling) will always be used.  Support for smooth scaling in
      Stellar Game Engine implementations is optional.  If the
      implementation used does not support smooth scaling, this option
      will always be treated as False.
  * fps: The rate the game should run in frames per second.  Note that
      this is only the maximum; if the computer is not fast enough, the
      game may run more slowly.
  * delta: If set to True, delta timing will be enabled, which adjusts
      speeds and animation rates if the game cannot run at the specified
      frame rate.
  * delta_min: Delta timing can cause the game to be choppy.  This
      setting limits this by pretending that the frame rate is never
      lower than this amount, resulting in the game slowing down like
      normal if it is.
  * grab_input: If set to True, all input will be locked into the game.
  
  Read-Only Attributes:
  * sprites: A dictionary containing all loaded sprites, using their
      names as the keys.
  * background_layers: A dictionary containing all loaded background
      layers, using their sprites' names as the keys.
  * backgrounds: A dictionary containing all loaded backgrounds, using
      their unique identifiers as the keys.
  * fonts: A dictionary containing all loaded fonts, using their names
      as the keys.
  * sounds: A dictionary containing all loaded sounds, using their file
      names as the keys.
  * music: A dictionary containing all loaded music, using their file
      names as the keys.
  * objects: A dictionary containing all sge.StellarClass objects in the
      game, using their unique identifiers as the keys.
  * rooms: A list containing all rooms in order of their creation.
  * current_room: The Room object which is currently active.
  * mouse: An sge.StellarClass object which represents the mouse cursor.
      Its ID is "mouse" and its bounding box is one pixel.  Speed
      variables are determined by averaging all mouse movement during
      the last quarter of a second.  Assigning to its ``visible``
      attribute controls whether or not the mouse cursor is shown.
      Setting its sprite sets the mouse cursor.
  
  
    IV.A.1. Constructor Method (sge.Game.__init__)
    --------------------------------------------------------------------
    
    sge.Game.__init__(self, width=640, height=480, fullscreen=False,
        scale=0, scale_proportional=True, scale_smooth=False, fps=60,
        delta=False, delta_min=15)
    
    All arguments are used to set the respective initial attributes of
    the object.
    
    
    IV.A.2. sge.Game.start
    --------------------------------------------------------------------
    
    sge.Game.start(self)
    
    Starts the game in the first room.  This method can also be called
    at any time during the game to restart the game, resetting
    everything to its original state.
    
    
    IV.A.3. sge.Game.end
    --------------------------------------------------------------------
    
    sge.Game.end(self)
    
    Ends the game.  Please use this rather than sys.exit, as some
    implementations might do some clean-up here.
    
    
    IV.A.4. sge.Game.pause
    --------------------------------------------------------------------
    
    sge.Game.pause(self, sprite=None)
    
    Pauses the game, showing ``sprite`` (an sge.Sprite object) in the
    center of the screen.  If ``sprite`` is None, a default image is
    used instead; the exact image used is implementation-dependent.
    
    Normal events are not executed while the game is paused.  Instead,
    events with the same name, but prefixed with "event_paused_" instead
    of "event_", are executed.  Note that not all events have these
    alternative "paused" events associated with them.
    
    
    IV.A.5. sge.Game.unpause
    --------------------------------------------------------------------
    
    sge.Game.unpause(self)
    
    Unpauses the game.
    
    
    IV.A.6. sge.Game.event_game_start
    --------------------------------------------------------------------
    
    sge.Game.event_game_start(self)
    
    Game Start event.  This event is executed when the game starts.  It
    is only executed once (it is not executed again when the game
    restarts) and it is always the very first event executed.
    
    
    IV.A.7. sge.Game.event_step
    --------------------------------------------------------------------
    
    sge.Game.event_step(self, time_passed)
    
    Step event.  This event is always executed once each frame.
    ``time_passed`` indicates the number of milliseconds that have
    passed during the last frame.
    
    
    IV.A.8. sge.Game.event_key_press
    --------------------------------------------------------------------
    
    sge.Game.event_key_press(self, key)
    
    Key Press event.  This event is executed when a key on the keyboard
    is pressed.  ``key`` indicates the identifier string of the key that
    was pressed (see KEYS.txt for a list of all key identifier strings).
    
    
    IV.A.9. sge.Game.event_key_release
    --------------------------------------------------------------------
    
    sge.Game.event_key_release(self, key)
    
    Key Release event.  This event is executed when a key on the
    keyboard is released.  ``key`` indicates the identifier string of
    the key that was released (see KEYS.txt for a list of all key
    identifier strings).
    
    
    IV.A.10. sge.Game.event_mouse_move
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_move(self, x, y)
    
    Mouse Move event.  This event is executed when the mouse moves.
    ``x`` indicates the horizontal relative movement of the mouse, and
    ``y`` indicates the vertical relative movement of the mouse.
    
    
    IV.A.11. sge.Game.event_mouse_button_press
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_button_press(self, button)
    
    Mouse Button Press event.  This event is executed when a mouse
    button is pressed.  ``button`` indicates the number of the button
    that was pressed.  What button numbers correspond to what buttons
    can vary among implementations, so ``button`` should be checked
    against the following constants:
    
    * sge.MOUSE_BUTTON_LEFT
    * sge.MOUSE_BUTTON_RIGHT
    * sge.MOUSE_BUTTON_MIDDLE
    * sge.MOUSE_BUTTON_WHEEL_UP
    * sge.MOUSE_BUTTON_WHEEL_DOWN
    * sge.MOUSE_BUTTON_WHEEL_LEFT
    * sge.MOUSE_BUTTON_WHEEL_RIGHT
    
    
    IV.A.12. sge.Game.event_mouse_button_release
    --------------------------------------------------------------------
    
    sge.Game.event.mouse_button_release(self, button)
    
    Mouse Button Release event.  This event is executed when a mouse
    button is released.  ``button`` indicates the number of the button
    that was released.  What button numbers correspond to what buttons
    can vary among implementations, so ``button`` should be checked
    against the following constants:
    
    * sge.MOUSE_BUTTON_LEFT
    * sge.MOUSE_BUTTON_RIGHT
    * sge.MOUSE_BUTTON_MIDDLE
    * sge.MOUSE_BUTTON_WHEEL_UP
    * sge.MOUSE_BUTTON_WHEEL_DOWN
    * sge.MOUSE_BUTTON_WHEEL_LEFT
    * sge.MOUSE_BUTTON_WHEEL_RIGHT
    
    
    IV.A.13. sge.Game.event_joystick_axis_move
    --------------------------------------------------------------------
    
    sge.Game.event_joystick_axis_move(self, joystick, axis, value)
    
    Joystick Axis Move event.  This event is executed when an axis on a
    joystick changes position.  ``joystick`` indicates the number of the
    joystick, where 0 is the first joystick.  ``axis`` indicates the
    number of the axis, where 0 is the first axis.  ``value`` indicates
    the tilt of the axis, where 0 is in the center, -1 is tilted all the
    way to the left or up, and 1 is tilted all the way to the right or
    down.  Note that ``value`` can be any floating-point number between
    -1 and 1; it is not limited to integral values.
    
    Support for joysticks in SGE implementations is optional.


    IV.A.14. sge.Game.event_joystick_hat_move
    --------------------------------------------------------------------
    
    sge.Game.event_joystick_hat_move(self, joystick, hat, x, y)
    
    Joystick HAT Move event.  This event is executed when a HAT switch
    (also called the POV hat, POV switch, or d-pad) changes position.
    ``joystick`` indicates the number of the joystick, where 0 is the
    first joystick.  ``hat`` indicates the number of the HAT, where 0 is
    the first HAT.  ``x`` indicates the horizontal position of the HAT,
    where 0 is in the center, -1 is left, and 1 is right.  ``y``
    indicates the vertical position of the HAT, where 0 is in the
    center, -1 is up, and 1 is down.
    
    Support for joysticks in SGE implementations is optional.
    
    
    IV.A.15. sge.Game.event_joystick_button_press
    --------------------------------------------------------------------
    
    sge.Game.event_joystick_button_press(self, joystick, button)
    
    Joystick Button Press event.  This event is executed when a joystick
    button is pressed.  ``joystick`` indicates the number of the
    joystick, where 0 is the first joystick.  ``button`` indicates the
    number of the button that was pressed, where 0 is the first button
    on the joystick.
    
    Support for joysticks in SGE implementations is optional.
    
    
    IV.A.16. sge.Game.event_joystick_button_release
    --------------------------------------------------------------------
    
    sge.Game.event_joystick_button_release(self, joystick, button)
    
    Joystick Button Release event.  This event is executed when a
    joystick button is released.  ``joystick`` indicates the number of
    the joystick, where 0 is the first joystick.  ``button`` indicates
    the number of the button that was released, where 0 is the first
    button on the joystick.
    
    Support for joysticks in SGE implementations is optional.


    IV.A.17. sge.Game.event_close
    --------------------------------------------------------------------
    
    sge.Game.event_close(self)
    
    Close event.  This event is executed when the operating system tells
    the game to close, e.g. when the user presses the close button in
    the window frame.  It is always called after any
    sge.Room.event_close occurring at the same time.
    
    
    IV.A.18. sge.Game.event_mouse_collision
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_collision(self, other)
    
    Default Mouse Collision event.  This event is executed when another
    object collides with sge.game.mouse and none of the directional
    collision events are appropriate.  In particular, this event is
    executed if the collision was already happening in the previous
    frame, meaning that the object is colliding with the inside of the
    mouse. In addition, directional mouse collision events cause this
    event to execute by default if they are not overridden.  ``other``
    indicates the other object which was collided with.
    
    
    IV.A.19. sge.Game.event_mouse_collision_left
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_collision_left(self, other)
    
    Left Mouse Collision event.  This event is executed when another
    object collides with sge.game.mouse from the left.  ``other``
    indicates the other object which was collided with.
    
    
    IV.A.20. sge.Game.event_mouse_collision_right
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_collision_right(self, other)
    
    Right Mouse Collision event.  This event is executed when another
    object collides with sge.game.mouse from the right.  ``other``
    indicates the other object which was collided with.
    
    
    IV.A.21. sge.Game.event_mouse_collision_top
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_collision_top(self, other)
    
    Top Mouse Collision event.  This event is executed when another
    object collides with sge.game.mouse from the top.  ``other``
    indicates the other object which was collided with.
    
    
    IV.A.22. sge.Game.event_mouse_collision_bottom
    --------------------------------------------------------------------
    
    sge.Game.event_mouse_collision_bottom(self, other)
    
    Bottom Mouse Collision event.  This event is executed when another
    object collides with sge.game.mouse from the bottom.  ``other``
    indicates the other object which was collided with.
    
    
    IV.A.23. sge.Game.event_game_end
    --------------------------------------------------------------------
    
    sge.Game.event_game_end(self)
    
    Game End event.  This event is executed when the game ends.  It is
    only executed once and it is always the very last event executed.
    
    
    IV.A.24. sge.Game.event_paused_key_press
    --------------------------------------------------------------------
    
    sge.Game.event_paused_key_press(self, key)
    
    Key Press event when the game is paused.
    
    
    IV.A.25. sge.Game.event_paused_key_release
    --------------------------------------------------------------------
    
    sge.Game.event_paused_key_release(self, key)
    
    Key Release event when the game is paused.
    
    
    IV.A.26. sge.Game.event_paused_mouse_move
    --------------------------------------------------------------------
    
    sge.Game.event_paused_mouse_move(self, x, y)
    
    Mouse Move event when the game is paused.
    
    
    IV.A.27. sge.Game.event_paused_mouse_button_press
    --------------------------------------------------------------------
    
    sge.Game.event_paused_mouse_button_press(self, button)
    
    Mouse Button Press event when the game is paused.
    
    
    IV.A.28. sge.Game.event_paused_mouse_button_release
    --------------------------------------------------------------------
    
    sge.Game.event_paused_mouse_button_release
    
    Mouse Button Release event when the game is paused.
    
    
    IV.A.29. sge.Game.event_paused_joystick_axis_move
    --------------------------------------------------------------------
    
    sge.Game.event_paused_joystick_axis_move(self, joystick, axis,
        value)
    
    Joystick Axis Move event when the game is paused.
    
    
    IV.A.30. sge.Game.event_paused_joystick_hat_move
    --------------------------------------------------------------------
    
    sge.Game.event_paused_joystick_hat_move(self, joystick, hat, x, y)
    
    Joystick HAT Move event when the game is paused.
    
    
    IV.A.31. sge.Game.event_paused_joystick_button_press
    --------------------------------------------------------------------
    
    sge.Game.event_paused_joystick_button_press(self, joystick, button)
    
    Joystick Button Press event when the game is paused.
    
    
    IV.A.32. sge.Game.event_paused_joystick_button_release
    --------------------------------------------------------------------
    
    sge.Game.event_paused_joystick_button_release(self, joystick,
        button)
    
    Joystick Button Release event when the game is paused.
    
    
    IV.A.33. sge.Game.event_paused_close
    --------------------------------------------------------------------
    
    sge.Game.event_paused_close(self)
    
    Close event when the game is paused.
    
    
  IV.B. sge.Sprite
  ----------------------------------------------------------------------
  
  This class stores images and information about how SGE is to use those
  images.
  
  Attributes:
  * width: The width of the sprite in pixels.
  * height: The height of the sprite in pixels.
  * origin_x: The horizontal location of the origin (the pixel position
      in relation to the images to base rendering on), where the left
      edge of the image is 0 and origin_x increases toward the right.
  * origin_y: The vertical location of the origin (the pixel position in
      relation to the images to base rendering on), where the top edge
      of the image is 0 and origin_y increases toward the bottom.
  * transparent: True if the image should support transparency, False
      otherwise.  If the image does not have an alpha channel or if the
      implementation used does not support alpha transparency, a
      colorkey will be used, with the transparent color being the color
      of the top-rightmost pixel.
  * fps: The suggested rate in frames per second to animate the image
      at.
  * bbox_x: The horizontal location of the top-left corner of the
      suggested bounding box to use with this sprite, where origin_x is
      0 and bbox_x increases toward the right.
  * bbox_y: The vertical location of the top-left corner of the
      suggested bounding box to use with this sprite, where origin_y is
      0 and bbox_y increases toward the bottom.
  * bbox_width: The width of the suggested bounding box in pixels.
  * bbox_height: The height of the suggested bounding box in pixels.
  
  Read-Only Attributes:
  * name: The name of the sprite given when it was created.
  
  
    IV.B.1. Cunstructor Method (sge.Sprite.__init__)
    --------------------------------------------------------------------
    
    sge.Sprite.__init__(self, name=None, width=None, height=None,
        origin_x=0, origin_y=0, transparent=True, fps=60, bbox_x=0,
        bbox_y=0, bbox_width=None, bbox_height=None)
    
    ``name`` indicates the base name of the image files.  All remaining
    arguments are used to set the respective initial attributes of the
    object.
    
    The base name is used to find all individual image files which make
    up this sprite's animation.  First, a file who's name consists only
    of the base name plus a valid image extension is searched for.  If
    no such image is available, files with names consisting of the base
    name followed by either an underscore ("_") or a hyphen ("-") and
    then a positive integer are searched for, to be used as a single
    animation with the frames ordered by number (the lowest number is
    the first frame).  If neither of these methods return any results, a
    file with names consisting of the base name followed by either
    "_strip" or "-strip" and then an integer is searched for to be used
    as an animation; the image is split into a number of sections
    indicated by the number horizontally, like a horizontal reel.
    
    The following are all examples of images that will be loaded for a
    sprite given the base name "foo":
    * foo.png (single-frame, no animation)
    * foo-0.png (frame 0; the next frame would be foo-1.png)
    * foo-strip4.png (split horizontally into four sections)
    
    The base name can also be None, in which case the sprite will be a
    fully transparent rectangle at the specified size (with both
    ``width`` and ``height`` defaulting to 32 if they are set to None).
    The implementation decides what to assign to the sprite's ``name``
    attribute in this case, but it will always be a string.
    
    If no image is found based on any of the above methods and the base
    name is not None, IOError will be raised.
    
    If ``width`` or ``height`` is set to None, the respective size will
    be taken from the largest animation frame.  If ``bbox_width`` or
    ``bbox_height`` is set to None, it will be taken from ``width`` or
    ``height``, respectively.
    
    
    IV.B.2. sge.Sprite.draw_dot
    --------------------------------------------------------------------
    IV.B.3. sge.Sprite.draw_line
    --------------------------------------------------------------------
    IV.B.4. sge.Sprite.draw_rectangle
    --------------------------------------------------------------------
    IV.B.5. sge.Sprite.draw_ellipse
    --------------------------------------------------------------------
    IV.B.6. sge.Sprite.draw_circle
    --------------------------------------------------------------------
    IV.B.7. sge.Sprite.draw_sprite
    --------------------------------------------------------------------
    IV.B.8. sge.Sprite.draw_text
    --------------------------------------------------------------------
    IV.B.9. sge.Sprite.draw_clear
    --------------------------------------------------------------------
